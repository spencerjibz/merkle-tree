name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - run: cargo fmt --all -- --check
  test:
    name: lib tests and docs test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: taiki-e/install-action@nextest

      # Cache Cargo dependencies and LLVM install
      # Assign an ID to this step to check its 'cache-hit' output
      - name: Cache Cargo dependencies and LLVM install
        id: cache-cargo-llvm # Added ID
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            # Assuming 'llvm/' is the path where KyleMayes/install-llvm-action extracts LLVM
            # If it's './llvm' as per action docs for non-Windows, this is correct.
            # If it's a temp path, caching might be less effective.
            ./llvm # Added LLVM build directory to cache
          key: ${{ runner.os }}-cargo-llvm-19.1.0-${{ hashFiles('**/Cargo.lock') }} # Updated LLVM version in key
          restore-keys: |
            ${{ runner.os }}-cargo-llvm-19.1.0-
            ${{ runner.os }}-cargo- # Fallback to generic cargo cache

      # Conditionally Install LLVM and Clang ONLY if cache was not a hit
      - name: Install LLVM and Clang (version 19.1.0)
        # Only run this step if the cache was NOT a hit
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "19.1.0" # Make sure this matches the version in the cache key

      - name: Run tests
        run: cargo nextest run --release --all-features

  rust-clippy-analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-clippy

      - name: Install required cargo
        run: cargo install clippy-sarif sarif-fmt || true

      - name: Run rust-clippy
        run: cargo clippy \
          --all-features \
          --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true
