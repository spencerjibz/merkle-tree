name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - run: cargo fmt --all -- --check
  test:
    name: lib tests and docs test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: taiki-e/install-action@nextest

      # Cache Cargo dependencies and LLVM install
      - name: Cache Cargo dependencies and LLVM install
        id: cache-cargo-llvm
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            llvm/ # Path where KyleMayes/install-llvm-action might extract LLVM
          key: ${{ runner.os }}-cargo-llvm-19.1.0-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-llvm-19.1.0-
            ${{ runner.os }}-cargo-
      - run: dir && ls -lah
      # New step: Check if LLVM directory exists after cache restore
      # Explicitly runs ls -la ./llvm and then checks its existence.
      - name: Cache LLVM and Clang build
        id: cached-llvm
        uses: actions/cache@v3
        with:
          path: ./llvm
          key: llvm-19.0

      - name: Check for cached LLVM directory and list contents
        id: check-llvm-dir
        run: |
          echo "🔍 Checking for ./llvm directory and its contents..."
          ls -la ./llvm || echo "  ./llvm directory not found or empty." # List contents, suppress error if not found

          if [ -d "./llvm" ]; then
            echo "status=found" >> $GITHUB_OUTPUT
            echo "✅ ./llvm directory found."
          else
            echo "status=not-found" >> $GITHUB_OUTPUT
            echo "❌ ./llvm directory not found."
          fi
      # Conditionally Install LLVM and Clang ONLY if ./llvm was not found
      - name: Install LLVM and Clang (version 19.1.0)
        # Only run this step if the 'llvm/' directory was not found by the previous step
        if: steps.check-llvm-dir.outputs.status == 'not-found'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "19.1.0"

      - name: Set LIBCLANG_PATH and Linker Flags (with Absolute Paths)
        run: |
          echo "🔍 Setting LIBCLANG_PATH and RUSTFLAGS for linker..."

          # Determine the LLVM lib directory path
          LLVM_INSTALL_DIR="" # Initialize to empty

          # Prioritize LLVM_PATH if set (means install-llvm-action ran recently)
          if [ -n "${{ env.LLVM_PATH }}" ]; then
              LLVM_INSTALL_DIR="${{ env.LLVM_PATH }}"
              echo "Using LLVM_PATH from install-llvm-action: ${LLVM_INSTALL_DIR}"
          # Otherwise, assume it was restored from cache in the ./llvm directory
          elif [ -d "./llvm" ]; then
              # Convert the relative path to an absolute path using 'pwd -P'
              # GITHUB_WORKSPACE is the absolute path to the repository root
              LLVM_INSTALL_DIR="${GITHUB_WORKSPACE}/llvm"
              echo "Using cached LLVM path (absolute): ${LLVM_INSTALL_DIR}"
          else
              echo "❌ Error: LLVM installation directory not found after cache or install step. This job will likely fail."
              echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
              exit 1
          fi

          # Ensure LLVM_INSTALL_DIR is now an absolute path for consistency
          # (This step is mostly for clarity, as the above logic already ensures it)
          # If LLVM_PATH was already absolute, it remains so.
          # If it was ./llvm, it's now converted to absolute.

          LLVM_LIB_DIR="${LLVM_INSTALL_DIR}/lib"

          if [ -d "$LLVM_LIB_DIR" ]; then
            echo "LIBCLANG_PATH=$LLVM_LIB_DIR" >> $GITHUB_ENV
            echo "✅ LIBCLANG_PATH set to: $LLVM_LIB_DIR"

            CURRENT_RUSTFLAGS="${{ env.RUSTFLAGS }}"
            if [[ -z "$CURRENT_RUSTFLAGS" ]]; then
              echo "RUSTFLAGS=-L $LLVM_LIB_DIR" >> $GITHUB_ENV
            else
              echo "RUSTFLAGS=$CURRENT_RUSTFLAGS -L $LLVM_LIB_DIR" >> $GITHUB_ENV
            fi
            echo "✅ RUSTFLAGS modified to include -L $LLVM_LIB_DIR"

            echo "🔍 Verification: Listing libclang files in $LLVM_LIB_DIR"
            ls -la "$LLVM_LIB_DIR"/libclang* 2>/dev/null || echo "No libclang.so* files found in $LLVM_LIB_DIR."
          else
            echo "❌ Error: LLVM lib directory ($LLVM_LIB_DIR) not found. This job will likely fail."
            # Provide a fallback for LIBCLANG_PATH even if the main path isn't found
            echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
            exit 1
          fi

          echo "Final LIBCLANG_PATH: ${LIBCLANG_PATH:-'Not Set Yet (check logs above for actual value)'}"
          echo "Final RUSTFLAGS: ${RUSTFLAGS:-'Not Set Yet (check logs above for actual value)'}"
      - name: Clean previous build artifacts (removed `cargo clean`)
        run: ls -lah # Changed from `cargo clean` to just `ls -lah` for debugging

      - run: cargo nextest run --release --features all-stores

  rust-clippy-analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-clippy

      - name: Install required cargo
        run: cargo install clippy-sarif sarif-fmt || true

      - name: Run rust-clippy
        run: |
          cargo clippy 
          --all-features \
          --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true
