# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job for running cargo bench and deploying benchmark results to a separate page
  benchmark:
    # This job will run on the latest Ubuntu environment
    runs-on: ubuntu-latest
    # Define a separate environment for benchmarks.
    # The 'url' will be the URL of the deployed benchmark page.
    environment:
      name: benchmarks
      url: ${{ steps.deploy_benchmarks.outputs.page_url }}
    steps:
      - name: Checkout repository for benchmarks
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly

      # Cache Cargo dependencies and LLVM install
      # Assign an ID to this step to check its 'cache-hit' output
      - name: Cache Cargo dependencies and LLVM install
        id: cache-cargo-llvm # Added ID to check cache hit/miss
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ./llvm # Added LLVM build directory to cache
          # Modify the key to include LLVM version for better cache management
          key: ${{ runner.os }}-cargo-llvm-19.1.0-${{ hashFiles('**/Cargo.lock') }} # Updated LLVM version in key
          restore-keys: |
            ${{ runner.os }}-cargo-llvm-19.1.0-
            ${{ runner.os }}-cargo- # Fallback to generic cargo cache

      # Conditionally Install LLVM and Clang ONLY if cache was not a hit
      - name: Install LLVM and Clang (version 19.1.0)
        # Only run this step if the cache was NOT a hit for 'llvm/'
        if: steps.cache-cargo-llvm.outputs.cache-hit != 'true'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "19.1.0" # Make sure this matches the version in the cache key

      # This step sets LIBCLANG_PATH and RUSTFLAGS regardless of cache hit/miss
      # It relies on LLVM_PATH being set by KyleMayes/install-llvm-action (if run)
      # or assumes the 'llvm/' directory structure is restored by the cache.
      - name: Set LIBCLANG_PATH and Linker Flags
        run: |
          echo "🔍 Setting LIBCLANG_PATH and RUSTFLAGS for linker..."

          # Determine the LLVM lib directory path
          # Prioritize LLVM_PATH if set (means install-llvm-action ran)
          if [ -n "${{ env.LLVM_PATH }}" ]; then
              LLVM_INSTALL_DIR="${{ env.LLVM_PATH }}"
              echo "Using LLVM_PATH: ${LLVM_INSTALL_DIR}"
          # Otherwise, assume it was restored from cache in the ./llvm directory
          elif [ -d "./llvm" ]; then
              LLVM_INSTALL_DIR="./llvm"
              echo "Using cached LLVM path: ${LLVM_INSTALL_DIR}"
          else
              echo "❌ Error: LLVM installation directory not found. This job will likely fail."
              # Fallback for LIBCLANG_PATH, but linker will still likely fail if specific clang version is required
              echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
              exit 1 # Fail fast if core LLVM path not found
          fi

          LLVM_LIB_DIR="${LLVM_INSTALL_DIR}/lib"

          if [ -d "$LLVM_LIB_DIR" ]; then
            echo "LIBCLANG_PATH=$LLVM_LIB_DIR" >> $GITHUB_ENV
            echo "✅ LIBCLANG_PATH set to: $LLVM_LIB_DIR"
            
            # Preserve existing RUSTFLAGS if any, then add the new linker flag
            CURRENT_RUSTFLAGS="${{ env.RUSTFLAGS }}"
            if [[ -z "$CURRENT_RUSTFLAGS" ]]; then
              echo "RUSTFLAGS=-L $LLVM_LIB_DIR" >> $GITHUB_ENV
            else
              echo "RUSTFLAGS=$CURRENT_RUSTFLAGS -L $LLVM_LIB_DIR" >> $GITHUB_ENV
            fi
            echo "✅ RUSTFLAGS modified to include -L $LLVM_LIB_DIR"
            
            echo "🔍 Verification: Listing libclang files in $LLVM_LIB_DIR"
            ls -la "$LLVM_LIB_DIR"/libclang* 2>/dev/null || echo "No libclang.so* files found in $LLVM_LIB_DIR."
          else
            echo "❌ Error: LLVM lib directory ($LLVM_LIB_DIR) not found. This job will likely fail."
            echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
            exit 1 # Fail fast if core LLVM path not found
          fi

          echo "Final LIBCLANG_PATH: $LIBCLANG_PATH"
          echo "Final RUSTFLAGS: $RUSTFLAGS"

      - name: Run Cargo Bench (with increased memory limits)
        run: |
          ulimit -v unlimited || true
          ulimit -d unlimited || true
          cargo bench

      - name: Create Root Index HTML for Redirect
        run: |
          echo '<!DOCTYPE html>' > target/criterion/index.html
          echo '<html lang="en">' >> target/criterion/index.html
          echo '<head>' >> target/criterion/index.html
          echo '  <meta charset="UTF-8">' >> target/criterion/index.html
          echo '  <meta http-equiv="refresh" content="0; url=./report/index.html">' >> target/criterion/index.html
          echo '  <title>Redirecting to Benchmarks Report</title>' >> target/criterion/index.html
          echo '</head>' >> target/criterion/index.html
          echo '<body>' >> target/criterion/index.html
          echo '  <p>If you are not redirected automatically, follow this <a href="./report/index.html">link to the benchmarks report</a>.</p>' >> target/criterion/index.html
          echo '</body>' >> target/criterion/index.html
          echo '</html>' >> target/criterion/index.html

      - name: Setup Pages for Benchmarks
        uses: actions/configure-pages@v5
        with:
          enablement: benchmarks

      - name: Upload Benchmark Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/criterion

      - name: Deploy Benchmarks to GitHub Pages
        id: deploy_benchmarks
        uses: actions/deploy-pages@v4
        with:
          enablement: benchmarks
