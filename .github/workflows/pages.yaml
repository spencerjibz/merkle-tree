# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job for running cargo bench and deploying benchmark results to a separate page
  benchmark:
    # This job will run on the latest Ubuntu environment
    runs-on: ubuntu-latest
    # Define a separate environment for benchmarks.
    # The 'url' will be the URL of the deployed benchmark page.
    environment:
      name: benchmarks
      url: ${{ steps.deploy_benchmarks.outputs.page_url }}
    steps:
      - name: Set LIBCLANG_PATH
        run: |
          sudo apt install -y clang llvm libclang-dev build-essential pkg-config
          echo "🔍 Setting LIBCLANG_PATH for clang-sys dependencies..."
          # Use the LLVM_PATH environment variable set by KyleMayes/install-llvm-action
          echo "LLVM_PATH is: ${{ env.LLVM_PATH }}"

          # On Linux, libclang.so is typically in the 'lib' subdirectory of LLVM_PATH
          # We check if the 'lib' directory exists before setting
          if [ -d "${{ env.LLVM_PATH }}/lib" ]; then
            echo "LIBCLANG_PATH=${{ env.LLVM_PATH }}/lib" >> $GITHUB_ENV
            echo "✅ LIBCLANG_PATH set to: ${{ env.LLVM_PATH }}/lib"
          else
            echo "⚠️ Expected lib directory not found in LLVM_PATH. Falling back to /usr/lib/x86_64-linux-gnu."
            echo "LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
            echo "❌ Verify LLVM installation path if issues persist."
          fi

          # Verification
          echo "🔍 Verification:"
          if [ -n "$LIBCLANG_PATH" ] && [ -d "$LIBCLANG_PATH" ]; then
              ls -la "$LIBCLANG_PATH"/libclang* 2>/dev/null || echo "No libclang.so* files found in $LIBCLANG_PATH."
              echo "Current LIBCLANG_PATH: $LIBCLANG_PATH"
          else
              echo "Verification failed: LIBCLANG_PATH not set or directory does not exist."
          fi

      - name: Checkout repository for benchmarks
        uses: actions/checkout@v4
        # Configure Git for the fetch depth needed by dtolnay/rust-toolchain
        with:
          fetch-depth: 0 # Required for cargo bench to potentially link to previous results

      - name: Setup Rust toolchain
        # Use a specific version or 'stable' for consistency
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Cargo dependencies
        # This step caches Rust dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Cargo Bench (with increased memory limits)
        # Execute the benchmark command.
        # By default, Criterion.rs outputs HTML reports to target/criterion/
        # Using ulimit to increase the virtual memory limit for the process
        run: |
          ulimit -v unlimited || true # Set virtual memory limit to unlimited
          ulimit -d unlimited || true # Set data segment size limit to unlimited
          cargo bench

      - name: Create Root Index HTML for Redirect
        # This step creates an index.html at the root of the uploaded artifact
        # that redirects to the actual Criterion.rs report's index.html.
        run: |
          echo '<!DOCTYPE html>' > target/criterion/index.html
          echo '<html lang="en">' >> target/criterion/index.html
          echo '<head>' >> target/criterion/index.html
          echo '  <meta charset="UTF-8">' >> target/criterion/index.html
          echo '  <meta http-equiv="refresh" content="0; url=./report/index.html">' >> target/criterion/index.html
          echo '  <title>Redirecting to Benchmarks Report</title>' >> target/criterion/index.html
          echo '</head>' >> target/criterion/index.html
          echo '<body>' >> target/criterion/index.html
          echo '  <p>If you are not redirected automatically, follow this <a href="./report/index.html">link to the benchmarks report</a>.</p>' >> target/criterion/index.html
          echo '</body>' >> target/criterion/index.html
          echo '</html>' >> target/criterion/index.html

      - name: Setup Pages for Benchmarks
        # Configure GitHub Pages specifically for the 'benchmarks' environment
        uses: actions/configure-pages@v5
        with:
          enablement: benchmarks

      - name: Upload Benchmark Artifact
        # Upload the entire target/criterion directory to preserve relative paths
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/criterion

      - name: Deploy Benchmarks to GitHub Pages
        # Deploy the uploaded artifact to the GitHub Pages site for benchmarks
        id: deploy_benchmarks
        uses: actions/deploy-pages@v4
        with:
          enablement: benchmarks
